package br.com.ztech.controller.dto.converter;

import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;

import br.com.ztech.controller.dto.ExtratoDto;
import br.com.ztech.controller.dto.TipoExtratoDto;
import br.com.ztech.domain.Transacao;

@Configuration
public class TransacoesConverterExtratoDto implements Converter<Page<Transacao>, Page<ExtratoDto>> {

	private final static Logger logger = LogManager.getLogger(TransacoesConverterExtratoDto.class);

	@Override
	public Page<ExtratoDto> convert(Page<Transacao> source) {

		logger.info("TransacoesConverterExtratoDto convert {}", source);

		/*return source
				.stream()
				.map( t -> new ExtratoDto( 
					  t.getData(), 
					  t.getValorSaldo(), 
					  t.getValorMovimentacao(), 
			       	  t.getPorcentagemMovimentacao(), 
				      t.getValorTransacao(), 
				      t.getValorMovimentacao(),
				      getTipoExtratoDto(t)))
				
				.collect(Collectors.toList());*/
		
		/*return source.stream()
				.map( t -> new ExtratoDto( 
					  t.getData(), 
					  t.getValorSaldo(), 
					  t.getValorMovimentacao(), 
			       	  t.getPorcentagemMovimentacao(), 
				      t.getValorTransacao(), 
				      t.getValorMovimentacao(),
				      null))
				
				.collect(Collectors.toList());*/
		
		return new PageImpl<ExtratoDto>(source
				.stream()
				.map(t -> 
				
				t.getData(), 
				  t.getValorSaldo(), 
				  t.getValorMovimentacao(), 
				  t.getPorcentagemMovimentacao(), 
				  t.getValorTransacao(), 
				  t.getValorSaldoAtualizado(), 
				  new TipoExtratoDto(
						  	t.getTipoTransacao().getNome()), 
				  			null)
						
						
						)
				.collect(Collectors.toList()), source.getPageable(), source.getTotalElements());
		
		//return null;

	}
	
	public ExtratoDto teste(Transacao t) {

		return new ExtratoDto(
							  t.getData(), 
							  t.getValorSaldo(), 
							  t.getValorMovimentacao(), 
							  t.getPorcentagemMovimentacao(), 
							  t.getValorTransacao(), 
							  t.getValorSaldoAtualizado(), 
							  new TipoExtratoDto(
									  	t.getTipoTransacao().getNome()), 
							  			null);
	
	}

	
	
	
	/*
	private ContaExtratoDto getContaExtratoDto(Transacao t) {

		if(Objects.nonNull(t.getContaTrasancao())) {

			return new ContaExtratoDto(
					
					new ClienteDto(
					
							t.getContaTrasancao().getCliente().getNome(), 
							t.getContaTrasancao().getCliente().getCpf()),  
					
					t.getContaTrasancao().getAgencia(), 
					t.getContaTrasancao().getNumeroConta());

		}

		return null;
	}*/

}