package br.com.ztech.controller;

import static br.com.ztech.eum.ConfiguracaoPorcentagemEnum.BONUS_DEPOSITO;
import static br.com.ztech.eum.ConfiguracaoPorcentagemEnum.CUSTO_RETIRADA;
import java.math.BigDecimal;
import java.util.Optional;

import org.assertj.core.api.Assertions;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.BDDMockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import br.com.ztech.controller.dto.ContaDto;
import br.com.ztech.controller.request.AbrirContaRequest;
import br.com.ztech.controller.request.MovimentacaoContaRequest;
import br.com.ztech.domain.ConfiguracaoPorcentagem;
import br.com.ztech.repository.ConfiguracaoPorcentagemRepository;

@Sql(scripts = "classpath:delete_all_junit.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class RetirarControllerTest {
	
	@Autowired
	private TestRestTemplate restTemplate;

	@LocalServerPort
	private int port;
	
	@MockBean
	private ConfiguracaoPorcentagemRepository configuracaoPorcentagemRepository;
	
	@Test
	public void  retirarTest() {
		
		var abrirContaRequest = new AbrirContaRequest("Alvaro Duarte", "98933075038");

		var requestEntityAbrirConta = new HttpEntity<>(abrirContaRequest);

		var responseAbrirConta = restTemplate.exchange(
				"/conta",
				HttpMethod.POST,
				requestEntityAbrirConta,
				ContaDto.class);
		
		Assertions.assertThat(responseAbrirConta.getStatusCodeValue()).isEqualTo(201);
		Assertions.assertThat(responseAbrirConta.getBody().getCliente().getCpf()).isEqualTo("98933075038");
		Assertions.assertThat(responseAbrirConta.getBody().getCliente().getNome()).isEqualTo("Alvaro Duarte");
		
		var conta = responseAbrirConta.getBody();
		
		var configuracaoPorcentagem = Optional.of(new ConfiguracaoPorcentagem(CUSTO_RETIRADA.getValor(), "BONUS_DEPOSITO", new BigDecimal(0.05)));
		BDDMockito.when(configuracaoPorcentagemRepository.findById(CUSTO_RETIRADA.getValor())).thenReturn(configuracaoPorcentagem);	
		
		var movimentacaoContaRequest = new MovimentacaoContaRequest(new BigDecimal(500.00));
		movimentacaoContaRequest.setValor(new BigDecimal(500.00));
		
		var requestEntityRetirarConta = new HttpEntity<>(movimentacaoContaRequest);

		var responseRetirarConta = restTemplate.exchange(
				"/conta/retirar/"+conta.getAgencia()+"/"+conta.getConta(),
				HttpMethod.PUT,
				requestEntityRetirarConta,
				ContaDto.class);
	
		Assertions.assertThat(responseRetirarConta.getStatusCodeValue()).isEqualTo(400);
		
	}
	
	@Test
	public void  depositarAndRetirarTest() {
		
		var abrirContaRequest = new AbrirContaRequest("Alvaro Duarte", "98933075038");

		var requestEntityAbrirConta = new HttpEntity<>(abrirContaRequest);

		var responseAbrirConta = restTemplate.exchange(
				"/conta",
				HttpMethod.POST,
				requestEntityAbrirConta,
				ContaDto.class);
		
		Assertions.assertThat(responseAbrirConta.getStatusCodeValue()).isEqualTo(201);
		Assertions.assertThat(responseAbrirConta.getBody().getCliente().getCpf()).isEqualTo("98933075038");
		Assertions.assertThat(responseAbrirConta.getBody().getCliente().getNome()).isEqualTo("Alvaro Duarte");
		
		var conta = responseAbrirConta.getBody();
		
		var configuracaoPorcentagem = Optional.of(new ConfiguracaoPorcentagem(BONUS_DEPOSITO.getValor(), "BONUS_DEPOSITO", new BigDecimal(0.05)));
		BDDMockito.when(configuracaoPorcentagemRepository.findById(BONUS_DEPOSITO.getValor())).thenReturn(configuracaoPorcentagem);	
		
		var movimentacaoContaRequest = new MovimentacaoContaRequest(new BigDecimal(500.00));
		movimentacaoContaRequest.setValor(new BigDecimal(500.00));
		
		var requestEntityDespositarConta = new HttpEntity<>(movimentacaoContaRequest);

		var responseDepositarConta = restTemplate.exchange(
				"/conta/depositar/"+conta.getAgencia()+"/"+conta.getConta(),
				HttpMethod.PUT,
				requestEntityDespositarConta,
				ContaDto.class);
	
		Assertions.assertThat(responseDepositarConta.getStatusCodeValue()).isEqualTo(200);
		Assertions.assertThat(responseDepositarConta.getBody().getCliente().getCpf()).isEqualTo("98933075038");
		Assertions.assertThat(responseDepositarConta.getBody().getCliente().getNome()).isEqualTo("Alvaro Duarte");
		Assertions.assertThat(responseDepositarConta.getBody().getSaldo().setScale(2, BigDecimal.ROUND_HALF_UP))
			.isEqualTo(new BigDecimal(525.00).setScale(2, BigDecimal.ROUND_HALF_UP));
		
		
		
		
		var configuracaoPorcentagemRetirada = Optional.of(new ConfiguracaoPorcentagem(CUSTO_RETIRADA.getValor(), "CUSTO_RETIRADA", new BigDecimal(1)));
		BDDMockito.when(configuracaoPorcentagemRepository.findById(CUSTO_RETIRADA.getValor())).thenReturn(configuracaoPorcentagemRetirada);	
		
		
		var movimentacaoContaRetiradaRequest = new MovimentacaoContaRequest(new BigDecimal(50.00));
		var requestEntityRetirarConta = new HttpEntity<>(movimentacaoContaRetiradaRequest);

		var responseRetirarConta = restTemplate.exchange(
				"/conta/retirar/"+conta.getAgencia()+"/"+conta.getConta(),
				HttpMethod.PUT,
				requestEntityRetirarConta,
				ContaDto.class);
	
		Assertions.assertThat(responseRetirarConta.getStatusCodeValue()).isEqualTo(200);
		Assertions.assertThat(responseRetirarConta.getBody().getCliente().getCpf()).isEqualTo("98933075038");
		Assertions.assertThat(responseRetirarConta.getBody().getCliente().getNome()).isEqualTo("Alvaro Duarte");
		Assertions.assertThat(responseRetirarConta.getBody().getSaldo().setScale(2, BigDecimal.ROUND_HALF_UP))
		.isEqualTo(new BigDecimal(474.50).setScale(2, BigDecimal.ROUND_HALF_UP));
		
	}

}