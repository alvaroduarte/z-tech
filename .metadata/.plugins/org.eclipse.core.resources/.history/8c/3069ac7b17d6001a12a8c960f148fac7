package br.com.ztech.controller.dto.converter;

import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.spel.spi.Function;

import br.com.ztech.controller.dto.ExtratoDto;
import br.com.ztech.domain.Transacao;

@Configuration
public class TransacoesConverterExtratoDto implements Converter<Page<Transacao>, Page<ExtratoDto>, Pageable> {

	private final static Logger logger = LogManager.getLogger(TransacoesConverterExtratoDto.class);

	@Override
	public Page<ExtratoDto> convert(Page<Transacao> source) {

		logger.info("TransacoesConverterExtratoDto convert {}", source);

		/*return source
				.stream()
				.map( t -> new ExtratoDto( 
					  t.getData(), 
					  t.getValorSaldo(), 
					  t.getValorMovimentacao(), 
			       	  t.getPorcentagemMovimentacao(), 
				      t.getValorTransacao(), 
				      t.getValorMovimentacao(),
				      getTipoExtratoDto(t)))
				
				.collect(Collectors.toList());*/
		
		
		
		
		//Page<ObjectDto> dto=objectRepository.findAll(pageable).map((object -> DozerBeanMapperBuilder.buildDefault().map(object, ObjectDto.class)));

		
		
		/*return source.stream()
				.map( t -> new ExtratoDto( 
					  t.getData(), 
					  t.getValorSaldo(), 
					  t.getValorMovimentacao(), 
			       	  t.getPorcentagemMovimentacao(), 
				      t.getValorTransacao(), 
				      t.getValorMovimentacao(),
				      null))
				
				.collect(Collectors.toList());*/
		
		 //source.stream().map(objectEntity -> modelMapper.map(objectEntity, ExtratoDto.class));
		
		
		
		 //Page<ExtratoDto> dtos  = (Page<ExtratoDto>) source.stream().map(this::convertToObjectDto);
		
		
		//source.stream().map(new ModelMapper().map(t, ExtratoDto.class));
		
		
		
		//Page<ExtratoDto> dtoPage = source.stream().map(t ->  getTipoExtratoDto(t)).collect(Collectors.toList());

		//Pageable pageable = PageRequest.of(

		
		return null;

	}
	
	
	
	
	
	private ExtratoDto getTipoExtratoDto(Transacao t) {
		
		//return new TipoExtratoDto(t.getTipoTransacao().getNome(), getContaExtratoDto(t));
		return null;
	}

	
	/*
	private ContaExtratoDto getContaExtratoDto(Transacao t) {

		if(Objects.nonNull(t.getContaTrasancao())) {

			return new ContaExtratoDto(
					
					new ClienteDto(
					
							t.getContaTrasancao().getCliente().getNome(), 
							t.getContaTrasancao().getCliente().getCpf()),  
					
					t.getContaTrasancao().getAgencia(), 
					t.getContaTrasancao().getNumeroConta());

		}

		return null;
	}*/

}