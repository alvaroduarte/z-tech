package br.com.ztech.repository;

import static org.assertj.core.api.Assertions.assertThat;

import static br.com.ztech.eum.ConfiguracaoPorcentagemEnum.BONUS_DEPOSITO;
import static br.com.ztech.eum.TipoTransacaoEnum.DEPOSITO_DINHEIRO;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit4.SpringRunner;

import br.com.ztech.domain.Cliente;
import br.com.ztech.domain.Conta;
import br.com.ztech.domain.TipoTransacao;

@RunWith(SpringRunner.class)
@DataJpaTest
public class TransacaoRepositoryTest {

	@Autowired
	private TransacaoRepository transacaoRepository;
	
	@Autowired
	private ContaRepository contaRepository;
	
	@Autowired
	private ClienteRepository clienteRepository;

	
	@Test
	public void saveTransacaoTest() {
		
		var clienteMock1 = new Cliente("Alvaro Duarte", "15723132008");
		
		clienteMock1 = clienteRepository.save(clienteMock1);
		
		var contaClienteMock1 = new Conta(100, Long.valueOf(88888), clienteMock1);
		
		contaClienteMock1 = contaRepository.save(contaClienteMock1);
	
		assertThat(contaClienteMock1).isNotNull();
		
		var conta = contaRepository.findByAgenciaAndNumeroConta(contaClienteMock1.getAgencia(), contaClienteMock1.getNumeroConta()).get();
		
		assertThat(conta.getAgencia()).isEqualTo(contaClienteMock1.getAgencia());
		assertThat(conta.getNumeroConta()).isEqualTo(contaClienteMock1.getNumeroConta());
		assertThat(conta.getCliente().getNome()).isEqualTo("Alvaro Duarte");
		assertThat(conta.getCliente().getCpf()).isEqualTo("15723132008");
				
		
	var teste =	new TipoTransacao(DEPOSITO_DINHEIRO.getCodigo(), "sfsdfdsfsdf");
		
				
		final var transacao = new Builder()
				.valorSaldo(new BigDecimal(100))
				.valorMovimentacao(new BigDecimal(200))
				.porcentagemMovimentacao(new BigDecimal(0.5))
				.valorTransacao(new BigDecimal(201))
				.valorSaldoAtualizado(new BigDecimal(301))
				.conta(conta)
				.tipoTransacao(teste))
				.build();
		
		transacaoRepository.save(transacao);
		
 	}

}