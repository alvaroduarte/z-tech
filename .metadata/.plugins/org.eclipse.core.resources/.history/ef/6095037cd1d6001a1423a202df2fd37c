package br.com.ztech.service;

import static br.com.ztech.eum.ConfiguracaoPorcentagemEnum.BONUS_DEPOSITO;
import static br.com.ztech.eum.TipoTransacaoEnum.DEPOSITO_DINHEIRO;

import java.math.BigDecimal;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.ztech.domain.Conta;
import br.com.ztech.domain.TipoTransacao;
import br.com.ztech.domain.Transacao.Builder;
import br.com.ztech.repository.ContaRepository;
import br.com.ztech.repository.TransacaoRepository;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class DepositarService extends ContaService {

	@Autowired
	private ContaRepository contaRepository;

	@Autowired
	private TransacaoRepository transacaoRepository;

	public Conta depositar(Integer agencia, Long numeroConta, BigDecimal valorMovimentacao) {
		
		final var conta = buscarConta(agencia, numeroConta);
		
		return depositar( conta , valorMovimentacao );
	
	}
	
	public Conta depositar(String cpf, BigDecimal valorMovimentacao) {
		
		final var conta = buscarConta(cpf);
		
		return depositar( conta , valorMovimentacao );
	
	}

	@Transactional
	public Conta depositar(Conta conta, BigDecimal valorMovimentacao) {

		log.info("depositarConta conta {}, valorMovimentacao {}", conta, valorMovimentacao);
		
		final var porcentagemBonusDeposito = buscarConfiguracaoPorcentagem(BONUS_DEPOSITO.getValor()).getPorcentagem();

		final var valorSaldo = conta.getSaldo();

		final var valorBonus = calculoBonusDeposito(porcentagemBonusDeposito, valorMovimentacao);

		final var valorSaldoAtualizado = calculaSaldoDeposito(valorSaldo, valorMovimentacao, valorBonus);
		
		final var valorTransacao = calculoValorTransacao(valorMovimentacao, valorBonus);

		log.info("{}, porcentagemBonusDeposito {}, valorSaldo {}, valorBonus {}, valorTransacao {}, valorSaldoAtualizado {}", 
				conta, 
				porcentagemBonusDeposito, 
				valorSaldo, 
				valorBonus, 
				valorTransacao,
				valorSaldoAtualizado);

		conta.setSaldo( valorSaldoAtualizado );

		conta = contaRepository.save(conta);
		
		final var transacao = new Builder()
				.valorSaldo(valorSaldo)
				.valorMovimentacao(valorMovimentacao)
				.porcentagemMovimentacao(porcentagemBonusDeposito)
				.valorTransacao(valorTransacao)
				.valorSaldoAtualizado(valorSaldoAtualizado)
				.conta(conta)
				.tipoTransacao(new TipoTransacao(DEPOSITO_DINHEIRO.getCodigo()))
				.build();
		
		transacaoRepository.save(transacao);	
		
		log.info("deposito efetuado com sucesso na {}, {}", conta, transacao);

		return conta;
	}

	private BigDecimal calculaSaldoDeposito(BigDecimal valorSaldo, BigDecimal valorMovimentacao, BigDecimal valorBonus) {

		log.info("calculaSaldoDeposito valorSaldo {}, valorMovimentacao {},  valorBonus {}", valorSaldo, valorMovimentacao, valorBonus);

		final var saldoAtualizado = valorSaldo.add(valorMovimentacao).add(valorBonus);

		log.info("saldoAtualizado {}", saldoAtualizado);

		return saldoAtualizado;
	}

	private BigDecimal calculoBonusDeposito(BigDecimal valorPorcentagemBonusDeposito, BigDecimal valor) {

		log.info("calculoBonus valor {}", valor);

		final var valorCalculado = valor.multiply(valorPorcentagemBonusDeposito);

		log.info("valorCalculado {}", valorCalculado);

		return valorCalculado;

	}

}